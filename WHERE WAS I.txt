7/23/23
I have been using chatGPT3.5 and BARD (much less so) to assit me in creating this script.
I made a lot of progress but I did not follow any good practice about version control or progress logging.
I am trying to clean up the project folder and file versions now so I can make use of git. 
I would probably do well to start tracking improvements, bugs, and new feature tickets in a more formal way. 


8/18/2021
Thought about how I would actually apply payments- need to consider how often
the new minimum payment is calculated and how much can go straight to principal.
Also, how to ensure that the excess always goes to the highest interest loan first.

8/17/2021
researched existing options for multi-selecting sliders.
keywords: range sliders, interlinked, binding, synchronized, linked

similar to using digital audio adjustments
https://www.w3schools.com/howto/howto_js_rangeslider.asp
https://stackoverflow.com/questions/60060048/interlinked-multiple-sliders-in-swiftui


I think this gets me close - but the JSFIDDLE throws a script error
https://stackoverflow.com/questions/37402189/sync-multiple-slick-sliders-together

I think the idea would be that when the user clicks and drags; that creates a
selection of all the desired input sliders. Then creates a "handle" which,
when slid; proportionately adjusts all input sliders at once.311


1/24/21 - (Go read prior update as well)
tinkered with some visualizations - spent way too much time generating plots.
Should have stuck to 'Next Steps' which should begin with planning, then
I need to modularize the functions. Gotta figure out how to enter my planned payments
and see the impact - that should be a very well documented thing. Like:
Here's my Principal, interest, term, and monthly min. If I pay X/mo - show me what happens.
I just need to apply that over the amortization_schedule.



12/31 -
	used consolidated loan calculator to figure out account-level interest rate
 uses the weighted average rounded up to nearest 1/8th of a percent; may not be
 how they do it.

 changed the automatic division by 12 on user entry of interest rate.

 changed the input to the .main function to get principal and interest at the
account level rather than the individual loan level. (from wavg())



Next steps,
	find a way to confirm my account-level calculation.
	come up with a vision for final product
		FE user entry of their loans, BE logic, FE comparison/interaction
		***conceptualize a tool that allows users to input their planned payment amounts by month***
				find examples of strategy comparisons from the fed website/great lakes
	modularize the functions
	learn how to use atom(script), git, github, markdown, and everything else more effectively.

	figure out why the growth rate is so damn small; like .0001? that seems damn low
	Enable the user inputs and link them to the calculations for max_repayment duration
	test to see if it's worth optimizing the rgi finding function I've already got some ideas[1]
	write quick summary calculations for total time in repayment, total interest paid, etc...

	compute the differences by 'scenario'
	provide comparison of all options:
		long, short,
		level, stepped,
		separate, consolidated
		snowball, sniping

	maybe take into consideration expected inflation and the depreciation of your debt overtime



I copied the directory structure over from the packaging_tutorial and copied the
license and setup.py files as well. Before I publish - I need to update those.

https://pypi.org/project/amortization/

Help on package amortization:

NAME
    amortization

PACKAGE CONTENTS
    amortize
    amount
    schedule

FILE
    c:\users\david myers\appdata\local\programs\python\python38\lib\site-packages\amortization\__init__.py



[1]Step size = growth rate. the total number of periods,
	if present value(pv) = principal (+/- 1%):
		break #that's close enough use that growth rate and amortization schedule
	elif pv < p
		#take a step up
		growthrate += 0.001
	elif pv > principal:
		#take a half step back
		growthrate -=0.0005
